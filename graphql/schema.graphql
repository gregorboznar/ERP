scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    # Avtentikacija
    me: User @guard(with: ["sanctum"])

    # Stroji
    machines: [Machine!]! @all @guard(with: ["sanctum"])
    machine(id: ID! @eq): Machine @find @guard(with: ["sanctum"])

    # Produkti
    products: [Product!]! @all @guard(with: ["sanctum"])
    product(id: ID! @eq): Product @find @guard(with: ["sanctum"])

    # Serijski naročila
    seriesTenders: [SeriesTender!]! @all @guard(with: ["sanctum"])
    seriesTender(id: ID! @eq): SeriesTender @find @guard(with: ["sanctum"])
}

type Mutation {
    # Avtentikacija
    login(input: LoginInput!): AuthPayload!
    logout: LogoutResponse! @guard(with: ["sanctum"])

    # CRUD operacije za stroje
    createMachine(input: CreateMachineInput!): Machine! @create @guard(with: ["sanctum"])
    updateMachine(id: ID!, input: UpdateMachineInput!): Machine! @update @guard(with: ["sanctum"])
    deleteMachine(id: ID!): Machine! @delete @guard(with: ["sanctum"])

    # CRUD operacije za produkte
    createProduct(input: CreateProductInput!): Product! @create @guard(with: ["sanctum"])
    updateProduct(id: ID!, input: UpdateProductInput!): Product! @update @guard(with: ["sanctum"])
    deleteProduct(id: ID!): Product! @delete @guard(with: ["sanctum"])

    # CRUD operacije za serijske naročila
    createSeriesTender(input: CreateSeriesTenderInput!): SeriesTender! @create @guard(with: ["sanctum"])
    updateSeriesTender(id: ID!, input: UpdateSeriesTenderInput!): SeriesTender! @update @guard(with: ["sanctum"])
    deleteSeriesTender(id: ID!): SeriesTender! @delete @guard(with: ["sanctum"])
}

# Tipi
type User {
    id: ID!
    name: String!
    email: String!
    roles: [Role!]!
    created_at: DateTime!
    updated_at: DateTime!
}

type Machine {
    id: ID!
    machine_type: String
    type: String
    year_of_manufacture: Int
    manufacturer: String
    inventory_number: String
    control_period: Date
    title: String
    maintenance_points: [MaintenancePoint]
    maintenance_checks: [MaintenanceCheck]
    created_at: DateTime!
    updated_at: DateTime!
}

type Product {
    id: ID!
    name: String!
    nest_number: String
    nest_start_number: String
    code: String
    series_tenders: [SeriesTender]
    visual_characteristics: [VisualCharacteristic]
    measurement_characteristics: [MeasurementCharacteristic]
    created_at: DateTime!
    updated_at: DateTime!
}

type SeriesTender {
    id: ID!
    series_number: String!
    company: String!
    product_id: ID!
    tender_date: Date!
    series_size: Int
    series_code: String
    product: Product
    die_castings: [DieCasting]
    packagings: [Packagings]
    created_at: DateTime!
    updated_at: DateTime!
}

type Role {
    id: ID!
    name: String!
    guard_name: String!
}

type MaintenancePoint {
    id: ID!
    name: String!
    description: String
    location: String
    frequency: String
    last_check: Date
    machines: [Machine]
    created_at: DateTime!
    updated_at: DateTime!
}

type MaintenanceCheck {
    id: ID!
    maintenance_point_id: ID!
    machine_id: ID!
    check_date: Date!
    status: String!
    notes: String
    maintenance_point: MaintenancePoint
    machine: Machine
    created_at: DateTime!
    updated_at: DateTime!
}

type VisualCharacteristic {
    id: ID!
    name: String!
    description: String
    products: [Product]
    created_at: DateTime!
    updated_at: DateTime!
}

type MeasurementCharacteristic {
    id: ID!
    name: String!
    description: String
    unit: String
    products: [Product]
    created_at: DateTime!
    updated_at: DateTime!
}

type DieCasting {
    id: ID!
    series_tender_id: ID!
    casting_date: Date!
    status: String!
    quantity: Int!
    series_tender: SeriesTender
    created_at: DateTime!
    updated_at: DateTime!
}

type Packagings {
    id: ID!
    series_tender_id: ID!
    packaging_date: Date!
    status: String!
    quantity: Int!
    series_tender: SeriesTender
    created_at: DateTime!
    updated_at: DateTime!
}

# Avtentikacija
type AuthPayload {
    access_token: String!
    token_type: String!
    expires_in: Int!
    user: User!
}

type LogoutResponse {
    message: String!
}

# Input tipi
input LoginInput {
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required"])
}

input CreateMachineInput {
    machine_type: String
    type: String
    year_of_manufacture: Int
    manufacturer: String
    inventory_number: String
    control_period: Date
    title: String
}

input UpdateMachineInput {
    machine_type: String
    type: String
    year_of_manufacture: Int
    manufacturer: String
    inventory_number: String
    control_period: Date
    title: String
}

input CreateProductInput {
    name: String!
    nest_number: String
    nest_start_number: String
    code: String
}

input UpdateProductInput {
    name: String
    nest_number: String
    nest_start_number: String
    code: String
}

input CreateSeriesTenderInput {
    series_number: String!
    company: String!
    product_id: ID!
    tender_date: Date!
    series_size: Int
    series_code: String
}

input UpdateSeriesTenderInput {
    series_number: String
    company: String
    product_id: ID
    tender_date: Date
    series_size: Int
    series_code: String
}

type DeleteResponse {
    message: String!
}